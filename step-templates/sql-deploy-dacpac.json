{
  "Id": "ActionTemplates-12",
  "Name": "SQL - Deploy DACPAC",
  "Description": "Deploys a DACPAC to a target database. Requires DACfx (from the Web Platform Installer) or Visual Studio and the SSDT extension to be installed.",
  "ActionType": "Octopus.Script",
  "Version": 14,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "$regKeyFormat = 'HKLM:\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\{0}.0'\n$ssdtSubfolder = 'Extensions\\Microsoft\\SQLDB\\DAC\\120'\n$dacfxPath = 'C:\\Program Files\\Microsoft SQL Server\\120\\DAC\\bin'\n$vsVersions = @( '14', '12' )\n\n$progressChangedEvent = \"ProgressChanged\"\n\nfunction Validate-Argument($name, $value) {\n    if (!$value) {\n        throw ('Missing required value for parameter ''{0}''.' -f $name)\n    }\n\n    return $value\n}\n\nfunction Load-DacAssembly {\n    Write-Verbose 'Testing if DACfx was installed...'\n    \n    if (Test-Path $dacfxPath) {\n        Add-Type -Path ($dacfxPath + '\\Microsoft.SqlServer.Dac.dll')\n    } else {\n        Write-Verbose 'Attempting to discover Visual Studio install folder...' \n        $regKey = $vsVersions | foreach { $regKeyFormat -f $_ } | where { Test-Path $_ } | select -First 1\n        \n        if (!$regKey) {\n            throw 'No usable Visual Studio installation found.'\n        }\n    \n        Write-Verbose 'Visual Studio found. Attempting to discover SSDT...'\n        $vsInstallDir = Get-ItemProperty -Path $regKey | select -ExpandProperty InstallDir\n        $ssdtPath = $vsInstallDir + $ssdtSubfolder\n    \n        if (!(Test-Path $ssdtPath)) {\n            throw 'SSDT not found. Please install the latest SSDT.'\n        }\n    \n        Write-Verbose 'Found SSDT, attempting to load DAC assembly...'\n        Add-Type -Path ($ssdtPath + '\\Microsoft.SqlServer.Dac.dll')\n    }\n    \n    Write-Verbose 'Loaded DAC assembly.'\n}\n\n#\n# Script\n#\n\n# Get arguments\n$dacpacPackageStepName = Validate-Argument 'DACPAC Package Step Name' $OctopusParameters['DacpacPackageStepName']\n$dacpacName = Validate-Argument 'DACPAC Name' $OctopusParameters['DacpacName']\n$targetConnectionString = Validate-Argument 'Target Connection String' $OctopusParameters['TargetConnectionString']\n$targetDatabaseName = Validate-Argument 'Target Database Name' $OctopusParameters['TargetDatabaseName']\n\n$profileName = $OctopusParameters['ProfileName']\n\n# Load the DAC assembly\nLoad-DacAssembly\n\n# Set .NET CurrentDirectory to package installation path\n$installDirPathKey = 'Octopus.Action[{0}].Output.Package.InstallationDirectoryPath' -f $dacpacPackageStepName\n$installDirPath = $OctopusParameters[$installDirPathKey]\n\n[System.Environment]::CurrentDirectory = $installDirPath\nWrite-Verbose ('Set Environment.CurrentDirectory to ''{0}''.' -f $installDirPath)\n\n# Load DacPackage\n$dacPackage = [Microsoft.SqlServer.Dac.DacPackage]::Load($dacpacName + '.dacpac')\n\n# Load DacProfile\nif ($profileName) {\n    $dacProfile = [Microsoft.SqlServer.Dac.DacProfile]::Load($profileName)\n    Write-Host ('Loaded publish profile ''{0}''.' -f $profileName)\n} else {\n    $dacProfile = New-Object Microsoft.SqlServer.Dac.DacProfile\n}\n\n# Setup DacServices\n$dacServices = New-Object Microsoft.SqlServer.Dac.DacServices -ArgumentList $targetConnectionString\nRegister-ObjectEvent $dacServices $progressChangedEvent -SourceIdentifier $progressChangedEvent -Action { Write-Verbose ('DacServices: {0}' -f $EventArgs.Message) } | Out-Null\n\n# Deploy package\ntry {\n    Write-Host 'Starting DACPAC deployment...'\n    $dacServices.Deploy($dacPackage, $targetDatabaseName, $true, $dacProfile.DeployOptions, $null)\n    Write-Host 'Deployment succeeded!'\n} catch [Microsoft.SqlServer.Dac.DacServicesException] {\n    Unregister-Event -SourceIdentifier $progressChangedEvent\n    throw ('Deployment failed: ''{0}'' Reason: ''{1}''' -f $_.Exception.Message, $_.Exception.InnerException.Message)\n}"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "DacpacPackageStepName",
      "Label": "DACPAC Package Step Name",
      "HelpText": "The step in which the DACPAC package was installed.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    },
    {
      "Name": "DacpacName",
      "Label": "DACPAC Name",
      "HelpText": "Name of the .dacpac file, without the .dacpac extension.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "TargetConnectionString",
      "Label": "Target Connection String",
      "HelpText": "Connection string of the target database server.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "TargetDatabaseName",
      "Label": "Target Database Name",
      "HelpText": "Name of the target database the DACPAC should be deployed to.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "ProfileName",
      "Label": "Profile Name",
      "HelpText": "Optional: name of the publish profile XML file.",
      "DefaultValue": null,
      "DisplaySettings": {}
    }
  ],
  "LastModifiedBy": "mlowijs",
  "$Meta": {
    "ExportedAt": "2015-09-06T09:10:53.821Z",
    "OctopusVersion": "3.0.21.0",
    "Type": "ActionTemplate"
  }
}
